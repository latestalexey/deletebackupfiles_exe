#Использовать logos
#Использовать cmdline
#Использовать "..\deletebackupfiles"

Перем Лог;

Перем мОтправлятьСообщенияПоЭлектроннойПочте;
Перем мПриложениеОтправкиЭлектроннойПочты;
Перем мЕстьПриложениеОтправкиЭлектроннойПочты;
Перем мКлиент;
Перем мСервер;


Функция Форматировать(Знач Уровень, Знач Сообщение) Экспорт

    Возврат СтрШаблон("%1: %2 - %3", Формат(ТекущаяДата(), "ДФ='dd.MM.yyyy HH:mm:ss'"), УровниЛога.НаименованиеУровня(Уровень), Сообщение);
	
КонецФункции

Процедура ОтправитьСообщениеПоЭлектроннойПочте(ТекстСообщения)

	Лог.Отладка("Отправка сообщения по электронной почте");
	
	Если НЕ мОтправлятьСообщенияПоЭлектроннойПочте Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаКоманды = СтрШаблон("""%1"" ""%2"" ""%3"" ""%4""", 
					мПриложениеОтправкиЭлектроннойПочты, "arch@us-prm.ru", "DeleteBackupFiles."+мКлиент+"."+мСервер, ТекстСообщения);
	ЗапуститьПриложение(СтрокаКоманды, ТекущийКаталог());

КонецПроцедуры

Процедура ОтправитьПростоеСообщениеПоЭлектроннойПочте(Знач Сообщение, Знач УровеньСообщения = "Информация")

	ТекстСообщения = СтрШаблон("%1: %2 - %3", Формат(ТекущаяДата(), "ДФ='dd.MM.yyyy HH:mm:ss'"), Врег(УровеньСообщения), Сообщение);
	ОтправитьСообщениеПоЭлектроннойПочте(ТекстСообщения);
	
КонецПроцедуры

Процедура ЗадатьНачальныеНастройки()
	
	Лог = Логирование.ПолучитьЛог("app.deletebackupfiles.messages");
	Лог.УстановитьУровень(УровниЛога.Информация);
	// Лог.УстановитьУровень(УровниЛога.Отладка);
	ФайлЖурнала = Новый ВыводЛогаВФайл();
	ФайлЖурнала.ОткрытьФайл("app.deletebackupfiles.messages.log");
	Лог.ДобавитьСпособВывода(ФайлЖурнала);
	Лог.ДобавитьСпособВывода(Новый ВыводЛогаВКонсоль());
	Лог.УстановитьРаскладку(ЭтотОбъект);

	мОтправлятьСообщенияПоЭлектроннойПочте = Истина;

	Лог.Отладка("мОтправлятьСообщенияПоЭлектроннойПочте: " + мОтправлятьСообщенияПоЭлектроннойПочте);
	
	Если мОтправлятьСообщенияПоЭлектроннойПочте Тогда
		мПриложениеОтправкиЭлектроннойПочты = "UsMailTo.exe";
		мЕстьПриложениеОтправкиЭлектроннойПочты = Ложь;

		НайденныеФайлы = НайтиФайлы(ОбъединитьПути(ТекущийКаталог(), мПриложениеОтправкиЭлектроннойПочты));
		мЕстьПриложениеОтправкиЭлектроннойПочты = (НайденныеФайлы.Количество() > 0);
		мОтправлятьСообщенияПоЭлектроннойПочте = мЕстьПриложениеОтправкиЭлектроннойПочты;
	КонецЕсли;
	
	Лог.Отладка("мПриложениеОтправкиЭлектроннойПочты: " + мПриложениеОтправкиЭлектроннойПочты);
	Лог.Отладка("мЕстьПриложениеОтправкиЭлектроннойПочты: " + мЕстьПриложениеОтправкиЭлектроннойПочты);
	Лог.Отладка("мОтправлятьСообщенияПоЭлектроннойПочте: " + мОтправлятьСообщенияПоЭлектроннойПочте);

	мКлиент = "Mercury";
	мСервер = "BASE";

	Лог.Отладка("мКлиент: " + мКлиент);
	Лог.Отладка("мСервер: " + мСервер);

КонецПроцедуры

ЗадатьНачальныеНастройки();

Лог.Информация("Начало");
Лог.Информация("ТекущийКаталог: "+ТекущийКаталог());

Попытка
	
	Парсер = Новый ПарсерАргументовКоманднойСтроки();
	
	Парсер.ДобавитьПараметр("ПутьКФайлу");
	Парсер.ДобавитьПараметрФлаг("-debug");
	
	Параметры = Парсер.Разобрать(АргументыКоманднойСтроки);
	
	Если Параметры["-debug"] = Истина Тогда
			Лог.УстановитьУровень(УровниЛога.Отладка);
	КонецЕсли;
	
	// Чтение настроек из переданного файла. 
	// Если файл не был передан, то выполняется чтение из файла по умолчанию "settings.json".
	ФайлСПараметрами = Параметры["ПутьКФайлу"];

	УдалениеФайловРезервныхКопий.ПрочитатьНастройки(ФайлСПараметрами);

	УдалениеФайловРезервныхКопий.ЗаполнитьЗаданияИзНастроек();
	
	УдалениеФайловРезервныхКопий.УдалитьУстаревшиеРезервныеКопии();

Исключение
	
	ИнформацияОбОшибке = ИнформацияОбОшибке();
	ТекстСообщения = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
	
	Лог.Ошибка("Ошибка удаления устаревших резервных копий!");
	Лог.Ошибка(ТекстСообщения);

	// Отправка сообщения об ошибке на электронную почту.
	ОтправитьПростоеСообщениеПоЭлектроннойПочте(ТекстСообщения, "Ошибка");

КонецПопытки;

Лог.Информация("Конец");